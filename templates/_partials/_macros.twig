{# @var craft \craft\web\twig\variables\CraftVariable #}
{# @var entry \craft\elements\Entry #}
{# ======================================================
  @filename: _macros
  @date:     29 Nov 2018
  ====================================================== #}
{#
  twig file with all site macros
#}

{% macro renderPicture(image, transforms, lazy, imgTitle, imgClass) %}
  {% set defaultImage = image %}
  {% set lazy = lazy ?? false %}
  <picture>
    {% for transform in transforms %}
      {% set srcset = craft.imager.transformImage(image, transform.sizes, {position: image.getFocalpoint()}) %}

      {% if craft.imager.serverSupportsWebp() %}
        {% set srcsetWebP = craft.imager.transformImage(image, transform.sizes, {format: 'webp', position: image.getFocalpoint()}) %}
      {% endif %}

      {% if loop.first %}
        {% set defaultImage = srcset[0] %}
      {% endif %}

      {% set media = "" %}
      {% if transform.media is defined %}
        {% set media = '('~ transform.media ~')' %}
      {% endif %}

      {% if craft.imager.serverSupportsWebp() %}
        {% if lazy %}
          <source data-srcset="{{ craft.imager.srcset(srcsetWebP) }}" media="{{ media }}" type="image/webp">
        {% else %}
          <source srcset="{{ craft.imager.srcset(srcsetWebP) }}" media="{{ media }}" type="image/webp">
        {% endif %}
      {% endif %}

      {% if lazy %}
        <source data-srcset="{{ craft.imager.srcset(srcset) }}" media="{{ media }}">
      {% else %}
        <source srcset="{{ craft.imager.srcset(srcset) }}" media="{{ media }}">
      {% endif %}


    {% endfor %}

    {% if image.title is defined and imgTitle == null %}
      {% set imgTitle = image.title %}
    {% endif %}

    {% if lazy %}
      <img data-src="{{ defaultImage }}" alt="{{ imgTitle }}" class="lazyload {{ imgClass }}"/>
    {% else %}
      <img src="{{ defaultImage }}" alt="{{ imgTitle }}" class="{{ imgClass }}"/>
    {% endif %}

  </picture>

{% endmacro %}

{% macro addNodeToNavigation(node, index) %}
  {%- set nodeClasses = [] -%}
  {%- if node.hasChildren -%}
    {%- set nodeClasses = nodeClasses|merge(['has-children']) -%}
  {%- endif -%}
  {%- if node.active or node.hasActiveChild -%}
    {%- set nodeClasses = nodeClasses|merge(['active']) -%}
  {%- endif -%}
  {%- if node.level == 1 and index == 1 -%}
    {%- set nodeClasses = nodeClasses|merge(['first']) -%}
  {%- endif -%}
  {%- if node.listClass|length -%}
    {%- set nodeClasses = nodeClasses|merge([node.listClass]) -%}
  {%- endif -%}

  <li{% if nodeClasses|length %} class="{{ nodeClasses|join(' ') }}"{% endif %}>
    <a href="{{ node.url }}" title="{{ node.name }}"{% if node.blank %} target="_blank"{% endif %}>{{ node.name }}</a>
    {% if node.hasChildren %}
      <ul class="nav__level{{ (node.level + 1) }}">
        {% for subnode in node.children.all() %}
          {{ _self.addNodeToNavigation(subnode, loop.index) }}
        {% endfor %}
      </ul>
    {% endif %}
  </li>
{% endmacro %}

{#
  Renders a sprite

  Params:
  sprite: The icon to use from the sprite
  classes: Css classes for the icon
#}
{% macro renderSvgSprite(icon, classes) %}
  <svg class="{{ classes }}">
    <use xlink:href="/assets/images/svg/sprite/sprite.svg#{{ icon }}"></use>
  </svg>
{% endmacro %}

{#
  Renders Navigation menu
#}
{% macro renderNav(nav) %}
  <ul class="nav-items">
    {% nav node in nav %}
      {% if node.hasDescendants %}
        <li class="nav-item dropdown">
          <a {% if node.url %}href="{{ node.url }}"{% endif %}
             class="nav-link{{ node.active ? ' nav-active' }}{{ idLink ? ' js-scroll' }}{{ node.classes ? ' ' ~ node.classes : '' }}"{% if node.newWindow %}
             target="_blank"
             rel="noopener"{% endif %}{% for attribute in node.customAttributes %}{{ attribute.attribute }}="{{ attribute.value }}"{% endfor %}
          ga-on="click" ga-event-category="Menu" ga-event-action="Click" ga-event-label="{{ node.title }}">
          {{ node.title }}
          </a>
          <a class="dropdown-toggle" href="#" id="main-mobile-dropdown" data-toggle="dropdown">
          </a>
          <ul class="dropdown-menu" aria-labelledby="main-mobile-dropdown">
            {% for subnode in node.children.all() %}
              <a
              {% if subnode.url %}href="{{ subnode.url }}"{% endif %} class="nav-link{{ subnode.active ? ' nav-active' }}{{ idLink ? ' js-scroll' }}{{ subnode.classes ? ' ' ~ subnode.classes : '' }}"{% if subnode.newWindow %} target="_blank" rel="noopener"{% endif %}{% for attribute in subnode.customAttributes %}{{ attribute.attribute }}="{{ attribute.value }}"{% endfor %} ga-on="click" ga-event-category="Menu" ga-event-action="Click" ga-event-label="{{ subnode.title }}">
              {{ subnode.title }}
              </a>
            {% endfor %}
          </ul>
        </li>
      {% elseif not node.parent | length %}
        <li class="nav-item">
          {% set idLink = node.url|first == '#' ? true : false %}
          <a {% if node.url %}href="{{ node.url }}"{% endif %}
             class="nav-link{{ node.active ? ' nav-active' }}{{ idLink ? ' js-scroll' }}{{ node.classes ? ' ' ~ node.classes : '' }}"{% if node.newWindow %}
             target="_blank"
             rel="noopener"{% endif %}{% for attribute in node.customAttributes %}{{ attribute.attribute }}=
          "{{ attribute.value }}"{% endfor %} ga-on="click" ga-event-category="Menu" ga-event-action="Click"
          ga-event-label="{{ node.title }}">
          {{ node.title }}
          </a>
        </li>
      {% endif %}
    {% endnav %}
  </ul>
{% endmacro %}

{% macro renderImageBackgroundCss(image, transforms, class) %}
  {% if class | length %}
    {% set sizes = [] %}

    {% for item in transforms %}
      {% set sizes = sizes | merge(item.sizes) %}
    {% endfor %}

    {% set transformedImages = craft.imager.transformImage(image, sizes,
      {position: image.getFocalpoint()}) %}

    {% set myCss %}
      {% for idx,transform in transforms %}
        {% if transform['media'] is defined %}
          @media only screen and ({{ transform.media }}) {
          .{{ class|join('.') }} {
          background-size: cover;
          background-image: url({{ transformedImages[ idx ] }});
          background-position: {{ image.getFocalpoint().x * 100 }}% {{ image.getFocalpoint().y * 100 }}%;
          }
          }
        {% else %}
          .{{ class|join('.') }} {
          background-size: cover;
          background-image: url({{ transformedImages[ idx ] }});
          background-position: {{ image.getFocalpoint().x * 100 }}% {{ image.getFocalpoint().y * 100 }}%;
          }
        {% endif %}
      {% endfor %}
    {% endset %}
  {% endif %}

  {% css myCss %}
{% endmacro %}

{% macro renderImageBackground(image, transforms, lazyload = false) %}

  {% set sizes = [] %}

  {% for item in transforms %}
    {% set sizes = sizes | merge(item.sizes) %}
  {% endfor %}

  {% set transformedImages = craft.imager.transformImage(image, sizes,
    {position: image.getFocalpoint()}) %}

  {% if lazyload %}
    {% set bgset = '' %}
    {% for idx,transform in transforms %}
      {% if transform['breakpoint'] is defined %}
        {% set bgset = bgset ~ (loop.first ? '' : ', ') ~ transformedImages[ idx ] ~ ' ' ~ transform.breakpoint ~ 'w' %}
      {% else %}
        {% set bgset = bgset ~ (loop.first ? transformedImages[ idx ] : '') %}
      {% endif %}
    {% endfor %}

    {% set inlineHtml = 'data-bgset=' ~ bgset %}
  {% else %}
    {% set style = '' %}
    {% for idx,transform in transforms %}
      {% if transform['media'] is defined %}
        {% set style = style ~ '
            @media only screen and (' ~ transform.media ~ ') {
            background-size: cover;
            background-image: url(' ~ transformedImages[ idx ] ~ ');
            background-position: ' ~ image.getFocalpoint().x * 100 ~ '% ' ~ image.getFocalpoint().y * 100~ '%;
            }' %}
      {% else %}
        {% set style = style ~ '
            background-size: cover;
            background-image: url(' ~ transformedImages[ idx ] ~ ');
            background-position: ' ~ image.getFocalpoint().x * 100 ~ '% ' ~ image.getFocalpoint().y * 100~ '%;' %}
      {% endif %}
    {% endfor %}
    {% set inlineHtml = 'style=' ~ style %}
  {% endif %}

  {{ inlineHtml }}
{% endmacro %}

{#
  Get Rich text area without the <p> elements
#}
{% macro renderRichText(text, class = 'd-block') %}
  {{ text | replace({ '<p>' : '<span class="' ~ class ~ '">', '</p>' : '</span>'}) | raw }}
{% endmacro %}
