# This is a basic workflow to help you get started with Actions
name: Deploy Production

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Cache
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        continue-on-error: true # continue if the cache restore/upload fails
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Cache Node Modules
        id: yarn-cache
        uses: actions/cache@v2
        continue-on-error: true # continue if the cache restore/upload fails
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Node Modules
        run: yarn

      - name: Install Composer Dependencies
        run: composer install

      - name: Build Project
        run: gulp build

      - name: Setup Production Environment
        run: |
          echo "SSH_HOST=${{ secrets.PRODUCTION_REMOTE_USER }}@${{ secrets.PRODUCTION_HOST }}" >> $GITHUB_ENV
          echo "SSH_OPTS=-i ~/.ssh/id_rsa" >> $GITHUB_ENV
          echo "DEPLOY_DIR=${{ secrets.PRODUCTION_ROOT }}" >> $GITHUB_ENV
          echo "CRAFT_ENVIRONMENT=production" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.PRODUCTION_DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_DATABASE=${{ secrets.PRODUCTION_DB_NAME }}" >> $GITHUB_ENV
          echo "DB_PORT=3306" >> $GITHUB_ENV
          echo "DB_SERVER=${{ secrets.PRODUCTION_DB_SERVER }}" >> $GITHUB_ENV
          echo "SITEURL=${{ secrets.PRODUCTION_URL }}" >> $GITHUB_ENV
          echo "SECURITY_KEY=${{ secrets.SECURITY_KEY }}" >> $GITHUB_ENV

      - name: Deploy to Production
        run: |
          chmod u+x deploy-production.sh
          ./deploy-production.sh

      - name: Checkout Private Critical CSS Action Repo
        uses: actions/checkout@v2
        with:
          repository: Appmanschap/Critical-CSS
          path: .github/actions/critical-css

      - name: Generate Critical CSS
        uses: ./.github/actions/critical-css
        with:
          serverBaseUrl: ${{ secrets.PRODUCTION_URL }}
          destinationPath: './criticalcss/'
          configPath: './critical-conf.json'
          sync: 'true'
          sshPrivateKeyPath: '~/.ssh/id_rsa'
          sshHost: ${{ secrets.PRODUCTION_REMOTE_USER }}@${{ secrets.PRODUCTION_HOST }}
          targetDir: './${DEPLOY_DIR}/public_html/assets/criticalcss/'
